class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detect_and_remove_loop(head):
    # Initialize slow and fast pointers
    slow = head
    fast = head

    # Move slow by one step and fast by two steps until they meet
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next

        # If they meet, it indicates a loop
        if slow == fast:
            break

    # If no loop is found, return
    if fast is None or fast.next is None:
        print("No loop found")
        return

    # Move slow to the head and advance both pointers one step at a time
    slow = head
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    # Remove the loop by setting the next of the last node in the loop to None
    fast.next = None
    print("Loop detected and removed")

def print_list(head):
    current = head
    while current:
        print(current.data, end=" -> ")
        current = current.next
    print("None")

# Creating a linked list with a loop for demonstration purposes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node2  # Creating a loop

# Detect and remove the loop
detect_and_remove_loop(node1)

# Print the modified linked list
print_list(node1)
